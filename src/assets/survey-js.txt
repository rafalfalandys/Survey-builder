"use strict";
(function () {
  /*
    Survey Template.
  
    To configure questions use belows QUESTIONS object. It is an array of questions in JSON format with related options.
    All questions are by default REQUIRED, unless specifically marked as not.
    All text inputs have default limit of 100 characters, unless specifically set to other numeric value.
    
    There are 5 types of questions:
    1) Single choice. For example:
      {
        type: "single",
        question: "How satisfied are you with the variety and selection of products available?",
        answers: [
          "Satisfied",
          "Neutral",
          "Unsatisfied",
          {answer: 'Other', options: {isOpen: true, limit: 20} }
        ],
        required: false
      }
      'required' field is optional.
      Answers are an array of strings or numbers. Answer could also be open.
      To make an answer open, specify it as an object with answer, and proper options properties.
      Options are 'isOpen' and 'limit'. Both are optional and are by defaut set to false, and 100.
      Example answer: { question1: "How satisfied are you with the variety and selection of products available?", answer1: "Satisfied" }
  
    2) Multiple choice. For example:
      {
        type: "multi",
        question: "What's most important to you when shopping online?",
        answers: [
          "Easy Returns",
          "Customer Reviews",
          "Product Variety",
          {answer: 'Other:', options: {isOpen: true }}
        ]
      },
      'required' field is optional. It's not used in this example, so by default this example question will be required.
      Answers are an array of strings or numbers. Answer could also be open.
      To make an answer open, specify it as an object with answer, and proper options properties.
      Options are 'isOpen' and 'limit'. Both are optional and are by defaut set to false, and 100.
      Example answer: { question2:"What's most important to you when shopping online?", answer2: ["Easy Returns", "Other:"], answer2_other: "Custom text" }
  
    3) Open question. This type is a simple text input. For example:
      {
        type: "open",
        question: "What is the one thing we could do to improve your experience?",
        limit: 200,
        required: true
      }
      'required' field is optional. By default this question will be required. Setting it here as 'true' could be skipped.
      'limit' field is optional. By default is set to 100.
      Example answer: { question3: "What is the one thing we could do to improve your experience?", answer3: "Custom text" }
  
    4) Scale question. This type is list of buttons with numeric values assigned to it (like 1 to 10). For example:
      {
        type: "scale",
        question: "How likely would you recommend our company to your friends and known ones?"
        length: 5,
      }
      'required' field is optional. It's not used in this example, so by default this question will be required.
      'length' field sets the number of inputs. It is optional and by default set to 10.
      Example answer: { question4: "How likely would you recommend our company to your friends and known ones?", answer4: 3/5 }
  
    5) Images question. This type is list of buttons represented by custom images.
      Each image has a value of its order in the row. For example:
      {
        type: "images",
        question: "Do you like this survey?",
        required: false
      }
      'required' field is optional.
      There is no length to be set. Custimize the belows object ('IMAGES_CONFIG').
      It is an array of objects, and its length is a number of answers. Each object takes 2 image links - the active, and not active.
      Example answer: { question5: "Do you like this survey?", answer5: "5/5" }
    
    After submit all answers come as an object following belows princip:
      {
        question1: "How satisfied are you with the variety and selection of products available?",
        answer1: "Neutral",
        question2: "What's most important to you when shopping online?",
        answer2: ["Easy Returns", "Other:"],
        answer2_other: "Custom text",
        question3: "What is the one thing we could do to improve your experience?",
        answer3: "Custom text" ,
        question4: "How likely would you recommend our company to your friends and known ones?",
        answer4: "3/5",
        question5: "Do you like this survey?",
        answer5: "5/5",
      }
    */
  ////////////////////////////////////////////
  ////////////////// config //////////////////
  ////////////////////////////////////////////
  // prettier-ignore
  const QUESTIONS = **configQuestions**;
  const QUESTIONS_DESCRIPTIONS = {
    single: `#### type: "string", id: "question-single__description", label: "Single choice question description", groupName: "Copy texts", groupId: "texts-copy", defaultValue: "Select one answer.", description: "Use this to provide instructions or information for questions that require a single answer." !####`,
    multi: `#### type: "string", id: "question-multiple__description", label: "Multiple choice question description", groupName: "Copy texts", groupId: "texts-copy", defaultValue: "Select 1 or more questions.", description: "This section is for detailing instructions or information for questions allowing multiple answers." !####`,
    open: `#### type: "string", id: "question-open__description", label: "Open question description", groupName: "Copy texts", groupId: "texts-copy", defaultValue: "Write your answer:", description: "Use this for giving instructions or context for open-ended questions that require a text response." !####`,
    scale: `#### type: "string", id: "question-scale__description", label: "Scale question description", groupName: "Copy texts", groupId: "texts-copy", defaultValue: "Select your answer.", description: "Here, you can add a description for scale-based questions, helping respondents understand how to rate or rank their answers." !####`,
    images: `#### type: "string", id: "question-images__description", label: "Images question description", groupName: "Copy texts", groupId: "texts-copy", defaultValue: "Select your answer.", description: "Here, you can add a description for images-based questions, helping respondents understand how to rate or rank their answers." !####`,
    date: `#### type: "string", id: "question-date__description", label: "Date question description", groupName: "Copy texts", groupId: "texts-copy", defaultValue: "Select your answer.", description: "Here, you can add a description for images-based questions, helping respondents understand how to rate or rank their answers." !####`,
  };
  // prettier-ignore
  const IMAGES_CONFIG = [
        {
            active: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/142206086b0a4785804177631000b066.png",
            notActive: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/29cf0488cc544f9aac90f29f43102f15.png",
        },
        {
            active: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/2718cb8778da4f4995bef3ca172e5415.png",
            notActive: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/d26515eacff24e5b9a212bace53fb2cb.png",
        },
        {
            active: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/fb8d0ccd8a0348179a4680b948bc565f.png",
            notActive: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/e94c73fb17c14d5696ca7001e60c8f6d.png",
        },
        {
            active: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/9356e245ab694d67b0590fbb753ec133.png",
            notActive: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/7c90531fb44c47129ef166518604de56.png",
        },
        {
            active: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/b0215917a0114cbcb5a424d4ff911e01.png",
            notActive: "https://upload.snrcdn.net/89c52a4790962b58713e7212f2c9a015cacb1536/default/origin/1328b76120f848e9b3e559a06b51979a.png",
        },
    ];
  let QUESTIONS_PER_PAGE =
    +`#### type: "number", id: "questions__per-page", label: "Questions per page", groupName: "General settings", groupId: "settings-general", defaultValue: "3", description: "This setting controls how many questions are displayed on each page of the survey." !####`;
  QUESTIONS_PER_PAGE = isNaN(QUESTIONS_PER_PAGE) ? 4 : QUESTIONS_PER_PAGE;
  const DEFAULT_LIMIT = 100;
  const SURVEY_NAME = `#### type: "string", id: "survey__name", label: "Survey name", groupName: "General settings", groupId: "settings-general", defaultValue: "Customer satisfaction survey", description: "This is the title of your survey. It will be used in events or analytics related to the survey's completion." !####`;
  const MAIN_EVENT_NAME = `#### type: "string", id: "main-event__name", label: "Main event name/tag", groupName: "General settings", groupId: "settings-general", defaultValue: "survey", description: "Name of the form.submit event tag. In in-apps name of the event sent to Synerise. Needs to be configured in platform events settings." !####`;
  const TRACK_STEPS =
    // @ts-ignore
    `#### type: "switch", id: "track-steps", groupName: "General settings", groupId: "settings-general", defaultValue: false, label: "Track steps" !####` ===
    "true";
  const CUSTOM_EVENT_NAME = `#### type: "string", id: "custom-event__name", label: "Custom event name", groupName: "General settings", groupId: "settings-general", defaultValue: "survey.step", description: "OPTIONAL. Name of the event sent to Synerise after each step of a survey. Needs to be configured in platform events settings." !####`;
  // @ts-ignore
  let ERROR_HANDLING_TYPE = `#### type: "select", id: "survey__error-type", label: "Error handling type", options: [{ value: "default", displayName: "Show errors" }, { value: "disableButtons", displayName: "Disable buttons" }], defaultValue: "default", groupName: "General settings", groupId: "settings-general" !####`;
  ERROR_HANDLING_TYPE =
    ERROR_HANDLING_TYPE === "disableButtons" || ERROR_HANDLING_TYPE === "default" ? ERROR_HANDLING_TYPE : "default";
  // @ts-expect-error jinja syntax generates a type error here - it's fine.
  const STYLE_TYPE = `#### type: "select", id: "display__type", order: 1, options: [{ value: "popup", displayName: "Popup" }, { value: "bottom-right", displayName: "Modal bottom-right" }, { value: "slide", displayName: "Slide-in" }, { value: "inapp", displayName: "In-App" }], label: "Display type", defaultValue: "popup", groupName: "General settings", groupId: "settings-general" !####`;
  ////////////////////////////////////////////
  ////////////////// helper //////////////////
  ////////////////////////////////////////////
  const hide = (el) => el.classList.add("snr-survey__hidden");
  const show = (el) => el.classList.remove("snr-survey__hidden");
  const generateToday = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, "0"); // getMonth() returns 0-11
    const day = String(today.getDate()).padStart(2, "0");
    const formattedDate = `${year}-${month}-${day}`;
    return formattedDate;
  };
  const mapAnswers = (a) => {
    const answers = a.map((answer) => {
      if (typeof answer === "string" || typeof answer === "number") {
        return {
          answer,
          options: { isOpen: false, limit: DEFAULT_LIMIT, endsSurvey: false },
        };
      } else {
        return {
          answer: answer.answer,
          options: {
            limit: answer.options?.limit ?? DEFAULT_LIMIT,
            isOpen: answer.options?.isOpen ?? false,
            endsSurvey: answer.options?.endsSurvey ?? false,
          },
        };
      }
    });
    return answers;
  };
  function mapToFixedType(questions) {
    return questions.map((q) => {
      const question = {
        ...q,
        required: q.required ?? false,
      };
      switch (q.type) {
        case "date":
          return {
            ...question,
            minDate: "minDate" in q ? (q.minDate === "today" ? generateToday() : q.minDate) : "",
            maxDate: "maxDate" in q ? (q.maxDate === "today" ? generateToday() : q.maxDate) : "",
          };
        case "images":
          return question;
        case "multi":
          return {
            ...question,
            answers: mapAnswers(q.answers),
            shuffleAnswers: q.shuffleAnswers ?? false,
          };
        case "scale":
          return {
            ...question,
            length: q.length ?? 5,
          };
        case "single":
          return {
            ...question,
            answers: mapAnswers(q.answers),
            shuffleAnswers: q.shuffleAnswers ?? false,
          };
        case "open":
          return {
            ...question,
            limit: q.limit ?? DEFAULT_LIMIT,
          };
        default:
          throw new Error(`Unknown question type: ${question.type}`);
      }
    });
  }
  const shuffle = (arr) => {
    const shuffledArray = arr
      .map((value) => ({ value, sort: Math.random() }))
      .sort((a, b) => a.sort - b.sort)
      .map(({ value }) => value);
    return shuffledArray;
  };
  ////////////////////////////////////////////
  ////////////////// logic ///////////////////
  ////////////////////////////////////////////
  /*
    QUESTIONS object is full of optional types (like answers could be an array of strings or array of objects with options).
    Handling such an object later requires using type quards in order to place deafult values where needed.
    That makes bugs easier to happen, and generally is just not cool.
    Therefore we map this object to sth where no parameters are optional, so all further code is easier to maintain.
    */
  const mappedQuestions = mapToFixedType(QUESTIONS);
  const state = {
    totalPages: Math.ceil(mappedQuestions.length / QUESTIONS_PER_PAGE),
    currentPage: 1,
    isScrolling: false,
  };
  ////////////////////////////////////////////
  ////////////////// view ////////////////////
  ////////////////////////////////////////////
  class View {
    _parentEl;
    _firstChildEl;
    _contentEl;
    _templateEl;
    _templateReplacementData;
    constructor(parent, templateId, templateReplacementData) {
      if (typeof parent === "string") this._parentEl = document.querySelector(parent);
      else this._parentEl = parent;
      this._templateEl = document.getElementById(templateId);
      this._firstChildEl = this._templateEl.firstElementChild?.cloneNode(true);
      this._templateReplacementData = templateReplacementData;
      if (templateReplacementData) this._replaceTemplateStrings(this._templateReplacementData);
      this._contentEl = this._firstChildEl.firstElementChild;
      this._render();
    }
    _replaceTemplateStrings(replaceData) {
      for (const [key, value] of Object.entries(replaceData)) {
        const templateStr = `**${key}**`;
        if (typeof value === "string" || typeof value === "number") {
          this._firstChildEl.innerHTML = this._firstChildEl.innerHTML.replaceAll(templateStr, value + "");
        } else if (typeof value === "object") {
          this._replaceTemplateStrings(value);
        }
      }
    }
    _render() {
      this._parentEl.insertAdjacentElement("beforeend", this._contentEl);
    }
    get contentEl() {
      return this._contentEl;
    }
  }
  class SurveyView extends View {
    submitBtn;
    nextBtn;
    previousBtn;
    pagesWrapper;
    visibleQuestions = [];
    _closeBtnEl;
    _surveyWrapper;
    _formEl;
    _finalViewEl;
    _allQuestionEls = [];
    _currentPageEl;
    _totalPagesEl;
    _requiredLegendEl = document.querySelector(".snr-survey__required-description");
    _slideSurveyBtn = document.querySelector(".snr-survey__tab");
    _modalWrapper;
    constructor() {
      super(".snr-survey__main-wrapper", "snr-survey__template");
      this.submitBtn = this._contentEl.querySelector(".snr-survey__btn-submit");
      this.nextBtn = this._contentEl.querySelector(".snr-survey__btn-next");
      this.previousBtn = this._contentEl.querySelector(".snr-survey__btn-previous");
      this.pagesWrapper = this._contentEl.querySelector(".snr-survey__pages");
      this._closeBtnEl = this._contentEl.querySelector(".snr-survey__close-btn");
      this._surveyWrapper = this._contentEl.querySelector(".snr-survey__survey-wrapper");
      this._formEl = this._contentEl.querySelector("form");
      this._finalViewEl = this._contentEl.querySelector(".snr-survey__final-view__wrapper");
      this._currentPageEl = this._contentEl.querySelector(".snr-survey__current-page");
      this._totalPagesEl = this._contentEl.querySelector(".snr-survey__total-pages");
      this._modalWrapper = this._parentEl.closest(".snrs-modal-wrapper");
      this._addCloseBtnHandler();
      this._showSurvey();
      this._mountQuestions();
      this._setQuestionsPages();
      if (STYLE_TYPE === "slide") this._showSlideBtn();
    }
    addSubmitHandler(handler) {
      this._formEl.addEventListener("submit", (e) => {
        e.preventDefault();
        handler();
      });
    }
    paginate() {
      hide(this._requiredLegendEl);
      this.visibleQuestions = [];
      this._allQuestionEls.forEach((el, i) => {
        const questionNo = +el.dataset.page;
        if (questionNo === state.currentPage) {
          show(el);
          this.visibleQuestions.push(i + 1);
          // show required legend if there is any required question on the page
          if (el.querySelector("[required=true]")) show(this._requiredLegendEl);
        } else {
          hide(el);
        }
      });
      this._currentPageEl.innerText = state.currentPage + "";
      if (ERROR_HANDLING_TYPE === "disableButtons") surveyView.checkValidity(state.currentPage);
    }
    showTotalPages(num) {
      this._totalPagesEl.innerText = num + "";
    }
    hideSurvey() {
      hide(this._surveyWrapper);
    }
    showFinalView() {
      show(this._finalViewEl);
    }
    addNextPageHandler(handler) {
      this.nextBtn.addEventListener("click", () => {
        handler("next");
      });
    }
    addPreviousPageHandler(handler) {
      this.previousBtn.addEventListener("click", () => {
        handler("prev");
      });
    }
    addSlideSurveyBtnHandler(handler) {
      this._slideSurveyBtn.addEventListener("click", handler);
    }
    toggleSurveyWrapper() {
      this._modalWrapper?.classList.toggle("snr-survey__slide");
    }
    changeToEndSurveyMode = () => {
      hide(this.nextBtn);
      show(this.submitBtn);
      this.skipValidation();
      this.showTotalPages(state.currentPage);
      if (ERROR_HANDLING_TYPE === "disableButtons") setTimeout(() => surveyView.enableButtons(), 0);
    };
    changeToNormalMode(totalPages, currentPage) {
      controlButtons(totalPages, currentPage);
      this.bringBackValidation();
      this.showTotalPages(totalPages);
      if (ERROR_HANDLING_TYPE === "disableButtons") this.checkValidity(currentPage);
    }
    checkValidity(currentPage) {
      const errors = this._allQuestionEls
        .filter((el) => +el.dataset.page === currentPage)
        .map((el) => {
          const inputEls = el.querySelectorAll("input");
          const textareaEls = el.querySelectorAll("textarea");
          const selectEls = el.querySelectorAll("select");
          return [...inputEls, ...textareaEls, ...selectEls];
        })
        .flatMap((el) => [...el].map((input) => input.checkValidity()));
      const isInvalid = errors.includes(false);
      if (ERROR_HANDLING_TYPE === "disableButtons") {
        const allInputs = this.contentEl.querySelectorAll("input");
        const isEndSurveyInputChecked = [...allInputs].some(
          (inputEl) => inputEl.checked && inputEl.dataset.endsSurvey === "true"
        );
        if (isEndSurveyInputChecked) {
          this.changeToEndSurveyMode();
        } else if (isInvalid) {
          this.disableButtons();
        } else this.enableButtons();
      }
      return isInvalid;
    }
    enableButtons() {
      [this.nextBtn, this.submitBtn].forEach((btn) => btn.removeAttribute("disabled"));
    }
    disableButtons() {
      [this.nextBtn, this.submitBtn].forEach((btn) => btn.setAttribute("disabled", "true"));
    }
    get formData() {
      const formData = new FormData(this._formEl);
      return formData;
    }
    skipValidation() {
      this.submitBtn.setAttribute("formnovalidate", "true");
    }
    bringBackValidation() {
      this.submitBtn.removeAttribute("formnovalidate");
    }
    _showSlideBtn() {
      this._slideSurveyBtn.removeAttribute("style");
    }
    _setQuestionsPages() {
      this._allQuestionEls.forEach((el, i) => {
        el.dataset.page = Math.ceil((i + 1) / QUESTIONS_PER_PAGE) + "";
      });
    }
    _mountQuestions() {
      mappedQuestions.forEach((question, index) => {
        const questionObj =
          question.type === "single"
            ? new QuestionRadioView(question, index + 1)
            : question.type === "multi"
            ? new QuestionCheckboxView(question, index + 1)
            : question.type === "scale"
            ? new QuestionScaleView(question, index + 1)
            : question.type === "open"
            ? new QuestionOpenView(question, index + 1)
            : question.type === "images"
            ? new QuestionImagesView(question, index + 1)
            : question.type === "date"
            ? new QuestionDateView(question, index + 1)
            : null;
        if (questionObj) this._allQuestionEls.push(questionObj.contentEl);
      });
    }
    _showSurvey() {
      this._parentEl.removeAttribute("style");
    }
    _addCloseBtnHandler() {
      this._closeBtnEl.addEventListener("click", () => {
        hide(this._parentEl);
        // @ts-ignore
        if (typeof SRInApp !== "undefined") SRInApp.close();
      });
    }
    addEndSurveyHandler(handler) {
      this._formEl.addEventListener("change", (e) => {
        if (e.target) handler(e.target);
      });
    }
    slideSurveyOut() {
      if (!this._modalWrapper) return;
      this._modalWrapper.style.display = "none";
      this._modalWrapper.classList.add("snr-survey__slide");
      setTimeout(() => {
        this._modalWrapper?.removeAttribute("style");
      }, 450);
      setTimeout(() => {
        this._modalWrapper?.classList.remove("snrs-modal-slide");
      }, 500);
    }
  }
  class QuestionView extends View {
    _question;
    _questionIndex;
    _answerEls = [];
    _answersContainer;
    _inputEls = [];
    _customCheckboxEls = [];
    _errorTextEl;
    constructor(templateId, question, questionIndex) {
      const replaceObj = {
        ...question,
        answers: undefined, // overriding answers array - keys are not strings there and would crash _replaceTemplateStrings method
        questionIndex,
        questionDescription: QUESTIONS_DESCRIPTIONS[question.type],
      };
      super(".snr-survey__questions__list", templateId, replaceObj);
      this._question = question;
      this._questionIndex = questionIndex;
      this._answersContainer = this._contentEl.querySelector(".snr-survey__answers__list");
      new QuestionContentView(this._contentEl, replaceObj, this._question.required);
      this._errorTextEl = this._contentEl.querySelector(".snr-survey__error__text");
    }
    _addGenericErrorHandler() {
      this._answerEls.forEach((answerEl, i) => {
        const inputEl = this._inputEls[i];
        if (ERROR_HANDLING_TYPE === "default") {
          inputEl.addEventListener("invalid", this._defaultErrorHandler.bind(this, answerEl, inputEl));
        }
      });
    }
    _defaultErrorHandler(answerEl, inputEl, e) {
      e.preventDefault();
      const customCheckboxEl = answerEl.querySelector(".snr-survey__answer__checkbox");
      const customCheckboxEls = this._contentEl.querySelectorAll(".snr-survey__answer__checkbox");
      // 'invalid' event is trigered for each input. Flag all invalid inputs with error class.
      customCheckboxEl?.classList.add("snr-survey__error__input");
      show(this._errorTextEl);
      // fix error after checking an answer
      inputEl.addEventListener("change", () => {
        hide(this._errorTextEl);
        if (customCheckboxEls.length > 0) {
          customCheckboxEls.forEach((el) => el.classList.remove("snr-survey__error__input"));
        }
      });
      this._moveToFirstPageWithError();
    }
    _moveToFirstPageWithError() {
      // in case errors are handled after submitting the survey - move to the first page the error occurs.
      // in case errors are handled after each page change, belows block does nothing.
      if (+this._contentEl.dataset.page < state.currentPage) {
        state.currentPage = +this._contentEl.dataset.page;
        surveyView.paginate();
        controlButtons(state.totalPages, state.currentPage);
      }
      // scroll to first question that thrown an error
      if (!state.isScrolling) {
        this.contentEl.scrollIntoView({ behavior: "smooth" });
        state.isScrolling = true;
        setTimeout(() => {
          state.isScrolling = false;
        }, 2000);
      }
    }
    _addCheckValidityOnChangeHandler() {
      this._inputEls.forEach((el) => {
        if (el instanceof HTMLInputElement) {
          ["change", "input"].forEach((event) =>
            el.addEventListener(event, () => setTimeout(() => surveyView.checkValidity(state.currentPage), 0))
          );
        } else {
          el.addEventListener("input", () => setTimeout(() => surveyView.checkValidity(state.currentPage), 0));
        }
      });
    }
    _addChangeHandler(handler) {
      this._inputEls.forEach((el) => {
        if (el instanceof HTMLInputElement) {
          el.addEventListener("change", (e) => {
            if (e.target) handler(e.target);
          });
        } else {
          el.addEventListener("input", (e) => {
            if (e.target) handler(e.target);
          });
        }
      });
    }
    _addExtraElements(answerObj) {
      const inputEl = answerObj.contentEl.querySelector("input");
      const customCheckboxEl = answerObj.contentEl.querySelector(".snr-survey__answer__checkbox");
      this._answerEls.push(answerObj.contentEl);
      this._inputEls.push(inputEl);
      if (customCheckboxEl) this._customCheckboxEls.push(customCheckboxEl);
    }
  }
  class QuestionContentView extends View {
    constructor(parent, replaceObj, required) {
      super(parent, "snr-survey__question__content__template", replaceObj);
      const requiredMarkEl = parent.querySelector(".snr-survey__required-mark");
      if (!required) requiredMarkEl.remove();
    }
    _render() {
      this._parentEl.insertAdjacentElement("afterbegin", this._contentEl);
    }
  }
  class AnswerView extends View {
    _inputEl;
    _required;
    constructor(parent, templateId, replaceObj, required) {
      super(parent, templateId, replaceObj);
      this._inputEl = this._contentEl.querySelector("input");
      this._required = required;
      this._setRequired();
    }
    _setRequired() {
      if (this._required) this._inputEl.setAttribute("required", "true");
      else this._inputEl.removeAttribute("required");
    }
  }
  class CounterView extends View {
    _inputEl;
    _counterEl;
    constructor(parentEl, limit, inputEl) {
      super(parentEl, "snr-survey__counter__template", { limit });
      this._inputEl = inputEl;
      this._counterEl = this._contentEl.querySelector(".snr-survey__counter--value");
      this.addInputChangeHandler();
    }
    addInputChangeHandler() {
      this._inputEl.addEventListener("input", () => {
        this._counterEl.textContent = this._inputEl.value.length + "";
      });
    }
  }
  ////////////////////////////////////////////
  /////// 0. Question single and multi ///////
  class QuestionClosed extends QuestionView {
    _question;
    constructor(template, question, questionIndex) {
      super(template, question, questionIndex);
      this._question = question;
      this._mountAnswers();
      if (ERROR_HANDLING_TYPE === "disableButtons") this._addCheckValidityOnChangeHandler();
    }
    _mountAnswers() {
      const answers = this._question.shuffleAnswers ? shuffle(this._question.answers) : this._question.answers;
      answers.forEach((answer, i) => {
        const replaceObj = {
          answer,
          questionKey: this._questionIndex,
          answerKey: i + 1,
        };
        const answerArgs = [
          this._answersContainer,
          { ...replaceObj, i },
          this._question.required,
          // @ts-expect-error we know it's an object
          answer.options,
        ];
        const answerObj =
          this._question.type === "single" ? new AnswerRadioView(...answerArgs) : new AnswerCheckboxView(...answerArgs);
        this._addExtraElements(answerObj);
      });
    }
  }
  class AnswerClosed extends AnswerView {
    _customInputWrapper;
    _customInputEl;
    _options;
    constructor(parent, templateId, replaceObj, required, options) {
      super(
        parent,
        templateId,
        { ...replaceObj, limit: options.limit, endsSurvey: JSON.stringify(options.endsSurvey) },
        required
      );
      this._options = options;
      this._customInputWrapper = this._contentEl.querySelector(".snr-survey__custom-input__wrapper");
      this._customInputEl = this._contentEl.querySelector(".snr-survey__custom-input");
      if (!options.isOpen) {
        this._removeCustomInputEl();
      } else {
        hide(this._customInputWrapper);
        this._mountCounter();
        this._addCustomInputHandler();
      }
    }
    _addCustomInputHandler() {
      const inputEl = this._contentEl.querySelector("input");
      inputEl?.addEventListener("change", (e) => {
        if (e.target && e.target instanceof HTMLInputElement) {
          if (e.target.checked) {
            show(this._customInputWrapper);
          } else {
            hide(this._customInputWrapper);
            this._customInputEl.value = "";
            // handle change event (counter)
            const event = new Event("input", { bubbles: true });
            this._customInputEl.dispatchEvent(event);
          }
        }
      });
    }
    _removeCustomInputEl() {
      this._customInputEl.remove();
    }
    _mountCounter() {
      new CounterView(this._customInputWrapper, this._options?.limit || DEFAULT_LIMIT, this._customInputEl);
    }
  }
  ////////////////////////////////////////////
  ///////// 1. Question type radio //////////
  class QuestionRadioView extends QuestionClosed {
    constructor(question, questionIndex) {
      super("snr-survey__question__template--single", question, questionIndex);
      this._question = question;
      this._addGenericErrorHandler();
    }
  }
  class AnswerRadioView extends AnswerClosed {
    constructor(parent, replaceObj, required, options) {
      super(parent, "snr-survey__answer__template--single", { replaceObj }, required, options);
    }
  }
  ////////////////////////////////////////////
  //////// 2. Question type checkbox /////////
  class QuestionCheckboxView extends QuestionClosed {
    constructor(question, questionIndex) {
      super("snr-survey__question__template--multi", question, questionIndex);
      this._question = question;
      this._addGenericErrorHandler();
      this._addChangeHandler(this._customChangeHandler.bind(this));
    }
    _customChangeHandler() {
      if (!this._question.required) return;
      // handle multiple answer error
      const isValid = this._inputEls.some((el) => el?.checked);
      if (isValid) this._inputEls.forEach((el) => el?.removeAttribute("required"));
      else this._inputEls.forEach((el) => el?.setAttribute("required", "true"));
    }
  }
  class AnswerCheckboxView extends AnswerClosed {
    constructor(parent, replaceObj, required, options) {
      super(parent, "snr-survey__answer__template--multi", { replaceObj }, required, options);
    }
  }
  ////////////////////////////////////////////
  ////////// 3. Question type scale //////////
  class QuestionScaleView extends QuestionView {
    _question;
    constructor(question, questionIndex) {
      super("snr-survey__question--scale__template", question, questionIndex);
      this._question = question;
      this._mountAnswers();
      this._addGenericErrorHandler();
      this._addChangeHandler(this._customChangeHandler.bind(this));
      if (ERROR_HANDLING_TYPE === "disableButtons") this._addCheckValidityOnChangeHandler();
    }
    _mountAnswers() {
      const length = this._question.length || 10;
      for (let i = 0; i < length; i++) {
        const replaceObj = {
          questionKey: this._questionIndex,
          answerKey: i + 1,
          limit: this._question.length,
        };
        const required = typeof this._question.required === "undefined" ? true : this._question.required;
        const answerObj = new AnswerScaleView(this._answersContainer, replaceObj, required);
        this._addExtraElements(answerObj);
      }
    }
    _customChangeHandler(target) {
      this._inputEls.forEach((_, i) => {
        if (i < +target.dataset.value) this._customCheckboxEls[i].classList.add("snr-survey__answer--active");
        else this._customCheckboxEls[i].classList.remove("snr-survey__answer--active");
      });
    }
  }
  class AnswerScaleView extends AnswerView {
    constructor(parent, replaceObj, required) {
      super(parent, "snr-survey__answer__template--scale", replaceObj, required);
    }
  }
  ////////////////////////////////////////////
  ///////// 4. Question type images //////////
  class QuestionImagesView extends QuestionView {
    _question;
    constructor(question, questionIndex) {
      super("snr-survey__question--scale__template", question, questionIndex);
      this._question = question;
      this._mountAnswers();
      this._addGenericErrorHandler();
      this._addChangeHandler(this._customChangeHandler.bind(this));
      if (ERROR_HANDLING_TYPE === "disableButtons") this._addCheckValidityOnChangeHandler();
    }
    _mountAnswers() {
      const length = IMAGES_CONFIG.length;
      for (let i = 0; i < length; i++) {
        const replaceObj = {
          questionKey: this._questionIndex,
          answerKey: i + 1,
          limit: length,
        };
        const required = typeof this._question.required === "undefined" ? true : this._question.required;
        const answerObj = new AnswerImagesView(this._answersContainer, replaceObj, required, i);
        this._addExtraElements(answerObj);
      }
    }
    _customChangeHandler(target) {
      this._inputEls.forEach((el, i) => {
        const imageEl = el.parentElement?.querySelector("img");
        if (i === +target.dataset.value - 1) imageEl.src = IMAGES_CONFIG[i].active;
        else imageEl.src = IMAGES_CONFIG[i].notActive;
      });
    }
  }
  class AnswerImagesView extends AnswerView {
    _imageEl;
    constructor(parent, replaceObj, required, index) {
      super(parent, "snr-survey__answer__template--image", replaceObj, required);
      this._imageEl = this._contentEl.querySelector("img");
      this._imageEl.src = IMAGES_CONFIG[index].notActive;
    }
  }
  ////////////////////////////////////////////
  ////////// 5. Question type text ///////////
  class QuestionOpenView extends QuestionView {
    _textAreaEl;
    constructor(question, questionIndex) {
      super("snr-survey__question--open__template", question, questionIndex);
      this._textAreaEl = this._contentEl.querySelector(".snr-survey__answer textarea");
      this._inputEls.push(this._textAreaEl);
      this._answerEls.push(this._textAreaEl);
      this._setRequired();
      this._addCustomErrorHandler();
      new CounterView(this._contentEl, question.limit || DEFAULT_LIMIT, this._textAreaEl);
      if (ERROR_HANDLING_TYPE === "disableButtons") this._addCheckValidityOnChangeHandler();
    }
    _addCustomErrorHandler() {
      const textEl = this._contentEl.querySelector("textarea");
      if (ERROR_HANDLING_TYPE === "default") {
        textEl.addEventListener("invalid", (e) => {
          e.preventDefault();
          this._customErrorHandler();
        });
      }
    }
    _customErrorHandler() {
      // 'invalid' event is trigered for each input. Flag all invalid inputs with error class.
      this._textAreaEl.classList.add("snr-survey__error__input");
      show(this._errorTextEl);
      // fix error after checking an answer
      this._textAreaEl.addEventListener("input", () => {
        if (this._textAreaEl.value.trim() !== "") {
          hide(this._errorTextEl);
          this._textAreaEl.classList.remove("snr-survey__error__input");
        } else {
          this._textAreaEl.classList.add("snr-survey__error__input");
          show(this._errorTextEl);
        }
      });
      this._moveToFirstPageWithError();
    }
    _setRequired() {
      const required = typeof this._question.required === "undefined" ? true : this._question.required;
      if (!required) this._textAreaEl.removeAttribute("required");
      else this._textAreaEl.setAttribute("required", "true");
    }
  }
  ////////////////////////////////////////////
  ///////// 6. Question type date //////////
  class QuestionDateView extends QuestionView {
    _inputEl;
    constructor(question, questionIndex) {
      super("snr-survey__question--date__template", question, questionIndex);
      this._question = question;
      this._inputEl = this._contentEl.querySelector(".snr-survey__answer input");
      this._inputEls.push(this._inputEl);
      this._answerEls.push(this._inputEl);
      this._addGenericErrorHandler();
      if (ERROR_HANDLING_TYPE === "disableButtons") this._addCheckValidityOnChangeHandler();
    }
  }
  const surveyView = new SurveyView();
  //////////////////////////////////////////////
  ////////////////// control ///////////////////
  const sendCustomData = () => {
    const dataObj = { ...buildFormDataObject(surveyView.visibleQuestions), step: state.currentPage };
    // @ts-ignore
    if (typeof SR !== "undefined") {
      // @ts-ignore
      SR.event.trackCustomEvent(CUSTOM_EVENT_NAME, dataObj, "survey step");
    }
    // @ts-ignore
    if (typeof SRInApp !== "undefined") {
      // @ts-ignore
      SRInApp.trackCustomEvent(CUSTOM_EVENT_NAME, dataObj, "label");
    }
  };
  const controlPageChange = (nextOrPrev) => {
    // check validity of questions on current page and block next page. Allow previous.
    if (nextOrPrev === "next") {
      const isInvalid = surveyView.checkValidity(state.currentPage);
      if (isInvalid) return;
      if (TRACK_STEPS) sendCustomData();
      state.currentPage++;
    }
    if (nextOrPrev === "prev") state.currentPage--;
    surveyView.paginate();
    controlButtons(state.totalPages, state.currentPage);
  };
  const controlButtons = (totalPages, currentPage) => {
    if (totalPages === 1) {
      // number of pages is 1
      show(surveyView.submitBtn);
      hide(surveyView.nextBtn);
      hide(surveyView.previousBtn);
      hide(surveyView.pagesWrapper);
    } else if (totalPages > 1 && currentPage === 1) {
      // number of pages is 2 or more and we are on first page
      hide(surveyView.submitBtn);
      show(surveyView.nextBtn);
      hide(surveyView.previousBtn);
    } else if (totalPages > 1 && currentPage === totalPages) {
      // number of pages is 2 or more and we are on last page
      show(surveyView.submitBtn);
      hide(surveyView.nextBtn);
      show(surveyView.previousBtn);
    } else {
      // number of pages is 3 or more and we are not on first page and not on last page
      hide(surveyView.submitBtn);
      show(surveyView.nextBtn);
      show(surveyView.previousBtn);
    }
  };
  const buildFormDataObject = (curQuestions) => {
    const dataObj = { surveyName: SURVEY_NAME };
    // building data object
    for (const [inputName, value] of surveyView.formData.entries()) {
      if (!value || (curQuestions && !curQuestions.some((questionNo) => inputName.includes(questionNo + "")))) continue;
      const inputEl = document.querySelector(`[name="${inputName}"]`);
      if (inputEl.type === "checkbox") {
        // multiple values
        if (dataObj[inputName]) {
          // second+ value
          dataObj[inputName].push(value);
        } else {
          // first of multiple values
          dataObj[inputName] = [value];
        }
      } else {
        // all other values
        dataObj[inputName] = value;
      }
    }
    // stringifying multiple answers
    for (const [key, value] of Object.entries(dataObj)) {
      if (typeof value === "object") {
        dataObj[key] = `${JSON.stringify(value)}`;
      }
    }
    return dataObj;
  };
  const controlSubmit = () => {
    const dataObj = buildFormDataObject();
    surveyView.hideSurvey();
    surveyView.showFinalView();
    // @ts-ignore
    if (typeof SR !== "undefined")
      // @ts-ignore
      SR.event.trackCustomEvent(MAIN_EVENT_NAME, dataObj).then(() => {
        if (TRACK_STEPS) sendCustomData();
      });
    // @ts-ignore
    if (typeof SRInApp !== "undefined") {
      // @ts-ignore
      SRInApp.trackCustomEvent(MAIN_EVENT_NAME, dataObj, "label");
      if (TRACK_STEPS) sendCustomData();
    }
  };
  const controlEndSurveyModeOff = (inputEl) => {
    if (inputEl.dataset.endsSurvey === "true" && !inputEl.checked) {
      surveyView.changeToNormalMode(state.totalPages, state.currentPage);
    }
  };
  const controlSlideSurvey = () => {
    surveyView.toggleSurveyWrapper();
  };
  const init = () => {
    surveyView.addSubmitHandler(controlSubmit);
    surveyView.paginate();
    surveyView.showTotalPages(state.totalPages);
    controlButtons(state.totalPages, state.currentPage);
    surveyView.addNextPageHandler(controlPageChange);
    surveyView.addPreviousPageHandler(controlPageChange);
    surveyView.addEndSurveyHandler(controlEndSurveyModeOff);
    if (STYLE_TYPE === "slide") {
      surveyView.slideSurveyOut();
      surveyView.addSlideSurveyBtnHandler(controlSlideSurvey);
    }
  };
  init();
})();
